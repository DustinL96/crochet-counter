{"version":3,"sources":["defs/screenPaths.ts","resources/images/CrochetCounterLogo.png","components/common/ScreenHeader.tsx","components/common/ScreenContainer.ts","components/common/Typography.ts","components/screens/CrochetCounterScreen.tsx","resources/images/HomeBackground.jpg","components/screens/HomeScreen.tsx","components/Router.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["COUNTER_SCREEN_PATH","HeaderContainer","styled","div","LogoImage","img","ScreenHeader","src","CrochetCounterLogo","alt","ScreenContainer","props","$flexDirection","$alignItems","$justifyContent","Typography","MaterialTypography","$transform","$fontWeight","$fontColor","$margin","$flex","$alignment","ProgressButton","IconButton","AddIcon","AddCircleOutline","GreenButton","Button","CrochetCounterScreen","useState","stepsString","setStepsString","numOfTimes","setNumOfTimes","patternStepsList","setPatternStepsList","currentCount","setCurrentCount","timesCount","setTimesCount","length","variant","onClick","count","disableRipple","disableFocusRipple","disableTouchRipple","RemoveCircleOutline","TextField","placeholder","value","onChange","event","target","type","parseInt","toUpperCase","split","SectionContainer","HomeBackground","ContentContainer","MenuButton","HomeScreen","nextScreen","setNextScreen","push","to","Router","basename","path","exact","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d62b81f8.chunk.js","sourcesContent":["export const HOME_SCREEN_PATH = \"/\";\nexport const COUNTER_SCREEN_PATH = \"/counter\";\n","export default __webpack_public_path__ + \"static/media/CrochetCounterLogo.0ac1ec93.png\";","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport CrochetCounterLogo from \"../../resources/images/CrochetCounterLogo.png\";\n\nexport const HEADER_HEIGHT = 100;\n\nconst HeaderContainer = styled.div`\n    display: flex;\n    width: 100%;\n    height: ${HEADER_HEIGHT}px;\n`;\n\nconst LogoImage = styled.img`\n    margin: 15px 30px;\n`;\n\nfunction ScreenHeader(): React.ReactElement {\n    return (\n        <HeaderContainer>\n            <LogoImage src={CrochetCounterLogo} alt=\"Crochet Counter Logo\" />\n        </HeaderContainer>\n    );\n}\n\nexport default ScreenHeader;\n","import styled from \"styled-components\";\n\nimport { HEADER_HEIGHT } from \"./ScreenHeader\";\n\ninterface IScreenContainerProps {\n    backgroundColor?: string;\n    $flexDirection?: \"row\" | \"column\";\n    $justifyContent?: \"flex-start\" | \"flex-end\" | \"center\" | \"space-between\" | \"space-around\" | \"space-evenly\";\n    $alignItems?: \"flex-start\" | \"flex-end\" | \"center\" | \"stretch\" | \"baseline\";\n}\n\nexport const ScreenContainer = styled.div<IScreenContainerProps>`\n    background-color: #ecfeff;\n    display: flex;\n    width: 100%;\n    height: calc(100% - ${HEADER_HEIGHT}px);\n    flex-direction: ${(props: IScreenContainerProps): string =>\n        props.$flexDirection ? props.$flexDirection : \"column\"};\n    align-items: ${(props: IScreenContainerProps): string => (props.$alignItems ? props.$alignItems : \"center\")};\n    justify-content: ${(props: IScreenContainerProps): string =>\n        props.$justifyContent ? props.$justifyContent : \"flexStart\"};\n`;\n","import { Typography as MaterialTypography } from \"@material-ui/core\";\nimport styled from \"styled-components\";\n\ninterface ITypographyProps {\n    $fontWeight?: string;\n    $fontColor?: string;\n    $transform?: string;\n    $margin?: string;\n    $alignment?: string;\n    $flex?: number;\n}\n\nexport const Typography = styled(MaterialTypography)<ITypographyProps>`\n    && {\n        display: flex;\n        align-items: center;\n        font-family: \"SourceSansPro\", sans-serif;\n        text-transform: ${(props: ITypographyProps): string | undefined => props.$transform};\n        font-weight: ${(props: ITypographyProps): string => (props.$fontWeight ? props.$fontWeight : \"normal\")};\n        color: ${(props: ITypographyProps): string | undefined => props.$fontColor};\n        margin: ${(props: ITypographyProps): string | undefined => props.$margin};\n        flex: ${(props: ITypographyProps): number | undefined => props.$flex};\n        text-align: ${(props: ITypographyProps): string | undefined => props.$alignment};\n    }\n`;\n","import { Button, IconButton, TextField } from \"@material-ui/core\";\nimport { AddCircleOutline, RemoveCircleOutline } from \"@material-ui/icons\";\nimport React, { ChangeEvent, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { ScreenContainer } from \"../common/ScreenContainer\";\nimport { Typography } from \"../common/Typography\";\n\nconst ProgressButton = styled(IconButton)`\n    && {\n        &:hover {\n            background-color: transparent;\n        }\n    }\n`;\n\nconst AddIcon = styled(AddCircleOutline)`\n    && {\n        width: 80%;\n        height: 80%;\n    }\n`;\n\nconst GreenButton = styled(Button)`\n    && {\n        background-color: lightgreen;\n        margin-top: 30px;\n        width: 150px;\n        height: 50px;\n        &:hover {\n            background-color: palegreen;\n        }\n    }\n`;\n\nfunction CrochetCounterScreen(): React.ReactElement {\n    const [stepsString, setStepsString] = useState<string>(\"\");\n    const [numOfTimes, setNumOfTimes] = useState<number>(1);\n\n    const [patternStepsList, setPatternStepsList] = useState<string[]>([]);\n    const [currentCount, setCurrentCount] = useState<number>(1);\n    const [timesCount, setTimesCount] = useState(1);\n\n    const handlePatternClick = (): void => {\n        setCurrentCount(1);\n        setTimesCount(1);\n        setPatternStepsList(stepsString.toUpperCase().split(\"-\"));\n    };\n\n    const handleNextStepClick = (): void => {\n        if (currentCount === patternStepsList.length) {\n            setTimesCount((count: number): number => count + 1);\n        }\n\n        setCurrentCount((count: number): number => {\n            if (count === patternStepsList.length) {\n                return 1;\n            }\n            return count + 1;\n        });\n    };\n\n    const handlePreviousStepClick = (): void => {\n        setCurrentCount((count: number): number => {\n            if (count === 1 && timesCount > 1) {\n                setTimesCount((count: number): number => count - 1);\n                return patternStepsList.length;\n            }\n\n            if (count === 1 && timesCount === 1) {\n                return 1;\n            }\n            return count - 1;\n        });\n    };\n\n    if (patternStepsList.length > 0 && currentCount === 1 && timesCount > numOfTimes) {\n        return (\n            <ScreenContainer>\n                <Typography variant=\"h4\" $margin=\"30px 0\">\n                    Round Complete!\n                </Typography>\n                <GreenButton onClick={(): void => setPatternStepsList([])}>\n                    <Typography variant=\"subtitle1\">Next Pattern</Typography>\n                </GreenButton>\n            </ScreenContainer>\n        );\n    }\n\n    if (patternStepsList.length > 0) {\n        return (\n            <ScreenContainer>\n                <Typography variant=\"h5\">Step: {currentCount}</Typography>\n                <Typography variant=\"h5\">Times: {timesCount}</Typography>\n                <Typography variant=\"h3\">{patternStepsList[currentCount - 1]}</Typography>\n                <ProgressButton onClick={handleNextStepClick} disableRipple disableFocusRipple disableTouchRipple>\n                    <AddIcon />\n                </ProgressButton>\n                <ProgressButton onClick={handlePreviousStepClick}>\n                    <RemoveCircleOutline />\n                </ProgressButton>\n                <Button onClick={(): void => setPatternStepsList([])}>Cancel</Button>\n            </ScreenContainer>\n        );\n    }\n\n    return (\n        <ScreenContainer>\n            <Typography variant=\"subtitle1\">{\"Please enter the steps below (Separate steps with '-')\"}</Typography>\n            <Typography variant=\"body2\" $margin=\"30px 0 0 0\">\n                Pattern\n            </Typography>\n            <TextField\n                placeholder=\"sc-sc-sc-inc\"\n                variant=\"outlined\"\n                value={stepsString}\n                onChange={(event: ChangeEvent<HTMLInputElement>): void => {\n                    setStepsString(event.target.value);\n                }}\n            />\n            <Typography variant=\"body2\" $margin=\"30px 0 0 0\">\n                Number of Times\n            </Typography>\n            <TextField\n                type=\"number\"\n                variant=\"outlined\"\n                value={numOfTimes}\n                onChange={(event: ChangeEvent<HTMLInputElement>): void => {\n                    setNumOfTimes(parseInt(event.target.value, 10));\n                }}\n            />\n            <GreenButton variant=\"contained\" onClick={handlePatternClick}>\n                <Typography variant=\"subtitle1\">Start!</Typography>\n            </GreenButton>\n        </ScreenContainer>\n    );\n}\n\nexport default CrochetCounterScreen;\n","export default __webpack_public_path__ + \"static/media/HomeBackground.3120aa33.jpg\";","import { Button } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport { COUNTER_SCREEN_PATH } from \"../../defs/screenPaths\";\nimport HomeBackground from \"../../resources/images/HomeBackground.jpg\";\nimport { ScreenContainer } from \"../common/ScreenContainer\";\nimport { Typography } from \"../common/Typography\";\n\nconst SectionContainer = styled.div`\n    width: 100%;\n    height: 100%;\n    background-image: url(${HomeBackground});\n    background-repeat: no-repeat;\n    background-position: center;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n`;\n\nconst ContentContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin: 60px 5%;\n`;\n\nconst MenuButton = styled(Button)`\n    && {\n        margin: 30px 0;\n        width: 350px;\n        height: 80px;\n        background-color: powderblue;\n        text-transform: none;\n        &:hover {\n            background-color: lightblue;\n        }\n    }\n`;\n\nfunction HomeScreen(): React.ReactElement {\n    const [nextScreen, setNextScreen] = useState<string | null>(null);\n    if (nextScreen !== null) {\n        return <Redirect push to={nextScreen} />;\n    }\n\n    return (\n        <ScreenContainer $alignItems=\"flex-start\">\n            <SectionContainer>\n                <ContentContainer>\n                    <Typography variant=\"h4\" $fontWeight=\"bold\">\n                        Stop Counting\n                    </Typography>\n                    <Typography variant=\"h4\" $fontWeight=\"bold\">\n                        Let us do it for you\n                    </Typography>\n                    <MenuButton variant=\"contained\" onClick={(): void => setNextScreen(COUNTER_SCREEN_PATH)}>\n                        <Typography variant=\"h5\">Get Started</Typography>\n                    </MenuButton>\n                </ContentContainer>\n            </SectionContainer>\n        </ScreenContainer>\n    );\n}\n\nexport default HomeScreen;\n","import React from \"react\";\nimport { HashRouter, Redirect, Route, Switch } from \"react-router-dom\";\n\nimport { COUNTER_SCREEN_PATH, HOME_SCREEN_PATH } from \"../defs/screenPaths\";\n\nimport ScreenHeader from \"./common/ScreenHeader\";\nimport CrochetCounterScreen from \"./screens/CrochetCounterScreen\";\nimport HomeScreen from \"./screens/HomeScreen\";\n\nfunction Router(): React.ReactElement {\n    return (\n        <HashRouter basename=\"/\">\n            <ScreenHeader />\n            <Switch>\n                <Route path={HOME_SCREEN_PATH} exact component={HomeScreen} />\n                <Route path={COUNTER_SCREEN_PATH} exact component={CrochetCounterScreen} />\n                <Redirect to={HOME_SCREEN_PATH} />\n            </Switch>\n        </HashRouter>\n    );\n}\n\nexport default Router;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Router from \"./components/Router\";\n\nfunction App(): React.ReactElement {\n    return <Router />;\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }: any) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}