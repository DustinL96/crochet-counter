{"version":3,"sources":["components/common/Typography.ts","components/screens/CrochetCounterScreen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Typography","styled","MaterialTypography","props","$transform","$fontWeight","$fontColor","$margin","$flex","$alignment","ScreenContainer","div","ProgressButton","IconButton","AddIcon","AddCircleOutline","GreenButton","Button","CrochetCounterScreen","useState","stepsString","setStepsString","numOfTimes","setNumOfTimes","patternStepsList","setPatternStepsList","currentCount","setCurrentCount","timesCount","setTimesCount","length","variant","onClick","count","disableRipple","disableFocusRipple","disableTouchRipple","RemoveCircleOutline","TextField","placeholder","value","onChange","event","target","type","parseInt","toUpperCase","split","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41284192.chunk.js","sourcesContent":["import { Typography as MaterialTypography } from \"@material-ui/core\";\nimport styled from \"styled-components\";\n\ninterface ITypographyProps {\n    $fontWeight?: string;\n    $fontColor?: string;\n    $transform?: string;\n    $margin?: string;\n    $alignment?: string;\n    $flex?: number;\n}\n\nexport const Typography = styled(MaterialTypography)<ITypographyProps>`\n    && {\n        display: flex;\n        align-items: center;\n        text-transform: ${(props: ITypographyProps): string | undefined => props.$transform};\n        font-weight: ${(props: ITypographyProps): string => (props.$fontWeight ? props.$fontWeight : \"normal\")};\n        color: ${(props: ITypographyProps): string | undefined => props.$fontColor};\n        margin: ${(props: ITypographyProps): string | undefined => props.$margin};\n        flex: ${(props: ITypographyProps): number | undefined => props.$flex};\n        text-align: ${(props: ITypographyProps): string | undefined => props.$alignment};\n    }\n`;\n","import { Button, IconButton, TextField } from \"@material-ui/core\";\nimport { AddCircleOutline, RemoveCircleOutline } from \"@material-ui/icons\";\nimport React, { ChangeEvent, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { Typography } from \"../common/Typography\";\n\nconst ScreenContainer = styled.div`\n    background-color: aliceblue;\n    display: flex;\n    width: 100%;\n    height: 100%;\n    flex-direction: column;\n    align-items: center;\n`;\n\nconst ProgressButton = styled(IconButton)`\n    && {\n        &:hover {\n            background-color: transparent;\n        }\n    }\n`;\n\nconst AddIcon = styled(AddCircleOutline)`\n    && {\n        width: 80%;\n        height: 80%;\n    }\n`;\n\nconst GreenButton = styled(Button)`\n    && {\n        background-color: lightgreen;\n        margin-top: 30px;\n        width: 150px;\n        height: 50px;\n        &:hover {\n            background-color: palegreen;\n        }\n    }\n`;\n\nfunction CrochetCounterScreen(): React.ReactElement {\n    const [stepsString, setStepsString] = useState<string>(\"\");\n    const [numOfTimes, setNumOfTimes] = useState<number>(1);\n\n    const [patternStepsList, setPatternStepsList] = useState<string[]>([]);\n    const [currentCount, setCurrentCount] = useState<number>(1);\n    const [timesCount, setTimesCount] = useState(1);\n\n    const handlePatternClick = (): void => {\n        setCurrentCount(1);\n        setTimesCount(1);\n        setPatternStepsList(stepsString.toUpperCase().split(\"-\"));\n    };\n\n    const handleNextStepClick = (): void => {\n        if (currentCount === patternStepsList.length) {\n            setTimesCount((count: number): number => count + 1);\n        }\n\n        setCurrentCount((count: number): number => {\n            if (count === patternStepsList.length) {\n                return 1;\n            }\n            return count + 1;\n        });\n    };\n\n    const handlePreviousStepClick = (): void => {\n        setCurrentCount((count: number): number => {\n            if (count === 1 && timesCount > 1) {\n                setTimesCount((count: number): number => count - 1);\n                return patternStepsList.length;\n            }\n\n            if (count === 1 && timesCount === 1) {\n                return 1;\n            }\n            return count - 1;\n        });\n    };\n\n    if (patternStepsList.length > 0 && currentCount === 1 && timesCount > numOfTimes) {\n        return (\n            <ScreenContainer>\n                <Typography variant=\"h3\">Crochet Counter</Typography>\n                <Typography variant=\"h4\" $margin=\"30px 0\">\n                    Round Complete!\n                </Typography>\n                <GreenButton onClick={(): void => setPatternStepsList([])}>\n                    <Typography variant=\"subtitle1\">Next Pattern</Typography>\n                </GreenButton>\n            </ScreenContainer>\n        );\n    }\n\n    if (patternStepsList.length > 0) {\n        return (\n            <ScreenContainer>\n                <Typography variant=\"h3\">Crochet Counter</Typography>\n                <Typography variant=\"h5\">Step: {currentCount}</Typography>\n                <Typography variant=\"h5\">Times: {timesCount}</Typography>\n                <Typography variant=\"h3\">{patternStepsList[currentCount - 1]}</Typography>\n                <ProgressButton onClick={handleNextStepClick} disableRipple disableFocusRipple disableTouchRipple>\n                    <AddIcon />\n                </ProgressButton>\n                <ProgressButton onClick={handlePreviousStepClick}>\n                    <RemoveCircleOutline />\n                </ProgressButton>\n                <Button onClick={(): void => setPatternStepsList([])}>Cancel</Button>\n            </ScreenContainer>\n        );\n    }\n\n    return (\n        <ScreenContainer>\n            <Typography variant=\"h3\">Crochet Counter</Typography>\n            <Typography variant=\"subtitle1\">{\"Please enter the steps below (Separate steps with '-')\"}</Typography>\n            <Typography variant=\"body2\" $margin=\"30px 0 0 0\">\n                Pattern\n            </Typography>\n            <TextField\n                placeholder=\"sc-sc-sc-inc\"\n                variant=\"outlined\"\n                value={stepsString}\n                onChange={(event: ChangeEvent<HTMLInputElement>): void => {\n                    setStepsString(event.target.value);\n                }}\n            />\n            <Typography variant=\"body2\" $margin=\"30px 0 0 0\">\n                Number of Times\n            </Typography>\n            <TextField\n                type=\"number\"\n                variant=\"outlined\"\n                value={numOfTimes}\n                onChange={(event: ChangeEvent<HTMLInputElement>): void => {\n                    setNumOfTimes(parseInt(event.target.value, 10));\n                }}\n            />\n            <GreenButton variant=\"contained\" onClick={handlePatternClick}>\n                <Typography variant=\"subtitle1\">Start!</Typography>\n            </GreenButton>\n        </ScreenContainer>\n    );\n}\n\nexport default CrochetCounterScreen;\n","import React from \"react\";\nimport \"./App.css\";\nimport CrochetCounterScreen from \"./components/screens/CrochetCounterScreen\";\n\nfunction App() {\n    return <CrochetCounterScreen />;\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }: any) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}